{"version":3,"file":"dialog.js","sources":["../src/defaults.js","../src/focus-trap.js","../src/index.js"],"sourcesContent":["/**\n * Default configuration.\n *\n * @property {string} label - ID of HTMLElement to use as label or a string.\n * @property {string} description - ID of HTMLElement to use as aria-describedby.\n * @property {boolean} alert - Set dialog role to alertdialog.\n * @property {string} openClass - The class applied to elements.dialog when open.\n */\nconst defaults = {\n\tlabel: 'Dialog',\n\tdescription: '',\n\talert: false,\n\topenClass: 'is-open',\n};\n\nexport default defaults;\n","const selectors = [\n\t'input',\n\t'select',\n\t'textarea',\n\t'button',\n\t'iframe',\n\t'a[href]',\n\t'area[href]',\n\t'audio[controls]',\n\t'video[controls]',\n\t'[contenteditable]:not([contenteditable=\"false\"])',\n];\n\n/**\n *\tChecks if an element appears in the tab order.\n *\n * @param {HTMLElement} element\n * @returns {boolean}\n */\nfunction isTabbable(element) {\n\tif (isRadio(element) && !isFocusableRadio(element)) {\n\t\treturn false;\n\t}\n\n\tlet tabindex = parseInt(element.getAttribute('tabindex'), 10);\n\n\tif (tabindex && tabindex < 0) {\n\t\treturn false;\n\t}\n\n\treturn  (\n\t\t!element.hidden &&\n\t\t!element.disabled &&\n\t\t!(element.offsetParent === null || getComputedStyle(element).visibility === 'hidden')\n\t);\n}\n\nfunction focus(element) {\n\tif (element && element instanceof HTMLElement && element.focus) {\n\t\telement.focus();\n\t}\n}\n\n/**\n *\tChecks if an element is a radio button.\n\n * @param {HTMLElement} element\n * @returns {boolean}\n */\nfunction isRadio(element) {\n\treturn (element.tagName === 'INPUT' || element.type === 'radio');\n}\n\n/**\n * Checks if a radio button is focusable. A radio is focusable if either no\n * radio within the group is checked or the radio is the checked option in\n * a group.\n *\n * @param {HTMLElement} element The element to check.\n * @returns {boolean}\n */\nfunction isFocusableRadio(element) {\n\tlet inputs = Array.from(document.getElementsByName(element.name));\n\tlet hasCheckedOption = inputs.some(input => input.checked);\n\n\tif (!hasCheckedOption) {\n\t\treturn true;\n\t}\n\n\treturn element.checked;\n}\n\n/**\n * Gets the focusable child elements within a given element.\n *\n * @param {HTMLElement} element\n * @returns {Array}\n */\nfunction getFocusableElements(element) {\n\treturn Array.from(element.querySelectorAll(selectors))\n\t\t.filter(elem => isTabbable(elem));\n}\n\n/**\n *\tFocus the focusable child element within a given element.\n *\n * @param {HTMLElement} element\n */\nfunction focusFirstElement(element) {\n\tconst nodes = getFocusableElements(element);\n\n\tif (nodes.length) {\n\t\tfocus(nodes[0]);\n\t}\n}\n\n/**\n *\tFocus trap constructor.\n *\n * @param {HTMLElement} element\n */\nfunction focusTrap(element) {\n\tlet trapActivated = false;\n\n\t/**\n\t * Activate the tab trap.\n\t */\n\tfunction activate(element) {\n\t\tif (trapActivated) {\n\t\t\treturn;\n\t\t}\n\n\t\tfocus(element);\n\t\ttrapActivated = true;\n\n\t\tdocument.addEventListener('focusin', onFocus, true);\n\t\tdocument.addEventListener('keydown', onKeydown, true);\n\t}\n\n\t/**\n\t * Deactivate the tab trap.\n\t */\n\tfunction deactivate(element) {\n\t\tif (!trapActivated) {\n\t\t\treturn;\n\t\t}\n\n\t\tdocument.removeEventListener('focusin', onFocus, true);\n\t\tdocument.removeEventListener('keydown', onKeydown, true);\n\n\t\tfocus(element);\n\t\ttrapActivated = false;\n\t}\n\n\t/**\n\t *\n\t * @param {FocusEvent} event\n\t */\n\tfunction onFocus(event) {\n\t\tconst focusLost = !element.contains(document.activeElement);\n\n\t\tevent.preventDefault();\n\t\tevent.stopImmediatePropagation();\n\n\t\tif (focusLost && trapActivated) {\n\t\t\tfocusFirstElement(element);\n\t\t}\n\t}\n\n\t/**\n\t * Handle keydown event.\n\t *\n\t * @param {KeyboardEvent} event\n\t */\n\tfunction onKeydown(event) {\n\t\tif (event.key === 'Tab') {\n\t\t\ttrapTab(element, event);\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {HTMLElement} element\n\t\t * @param {KeyboardEvent} event\n\t\t */\n\t\tfunction trapTab(element, event) {\n\t\t\tconst activeElement = document.activeElement;\n\n\t\t\tconst elements = getFocusableElements(element);\n\t\t\tconst firstTabStop = elements[0];\n\t\t\tconst lastTabStop = elements[elements.length - 1];\n\n\t\t\tif (event.shiftKey && (activeElement == firstTabStop)) {\n\t\t\t\tfocus(lastTabStop);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\tif (!event.shiftKey && (activeElement == lastTabStop)) {\n\t\t\t\tfocus(firstTabStop);\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { activate, deactivate };\n}\n\nexport default focusTrap;\n","import defaults from './defaults';\nimport focusTrap from './focus-trap';\n\n/**\n * @param {string} dialog - ID of the HTMLElement.\n * @param {string} main - ID of the HTMLElement.\n * @param {Object} options - Options object.\n */\nexport function dialog(dialog, main, options) {\n\tlet isOpen = false;\n\tlet initiated = false;\n\n\tconst elements = {\n\t\ttriggeringElement: undefined,\n\t\tmain: document.getElementById(main),\n\t\tdialog: document.getElementById(dialog),\n\t};\n\n\tif (!elements.dialog) {\n\t\tthrow new Error(`No element with the id \"${dialog}\"`);\n\t}\n\n\tif (!elements.main) {\n\t\tthrow new Error(`No element with the id \"${main}\"`);\n\t}\n\n\tconst config = Object.assign({}, defaults, options);\n\n\tconst trap = focusTrap(elements.dialog);\n\n\tfunction onKeydown(event) {\n\t\tif (event.key === 'Escape') close();\n\t}\n\n\t/**\n\t * Create\n\t */\n\tfunction create() {\n\t\tconst role = config.alert ? 'alertdialog' : 'dialog';\n\n\t\telements.dialog.setAttribute('role', role);\n\t\telements.dialog.setAttribute('aria-modal', true);\n\n\t\tif (config.label) {\n\t\t\t// If the label matches an ID use the element as the label.\n\t\t\tconst labeledby = document.getElementById(config.label);\n\t\t\tconst attribute = labeledby ? 'labelledby' : 'label';\n\n\t\t\telements.dialog.setAttribute(`aria-${attribute}`, config.label);\n\t\t}\n\n\t\tif (config.description && document.getElementById(config.description)) {\n\t\t\telements.dialog.setAttribute('aria-describedby', config.description);\n\t\t}\n\n\t\tinitiated = true;\n\n\t\tdispatchEvent('create');\n\t}\n\n\t/**\n\t * Open\n\t */\n\tfunction open(element) {\n\t\tif (isOpen || !initiated) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!dispatchEvent('open')) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element instanceof HTMLElement) {\n\t\t\telements.triggeringElement = element;\n\t\t}\n\n\t\tisOpen = true;\n\t\telements.dialog.classList.add(config.openClass);\n\t\tdocument.addEventListener('keydown', onKeydown, true);\n\n\t\ttrap.activate(elements.dialog.querySelector('[data-dialog-autofocus]'));\n\t}\n\n\t/**\n\t * Close\n\t */\n\tfunction close() {\n\t\tif (!isOpen || !initiated) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!dispatchEvent('close')) {\n\t\t\treturn;\n\t\t}\n\n\t\ttrap.deactivate(elements.triggeringElement);\n\n\t\tisOpen = false;\n\t\tdocument.removeEventListener('keydown', onKeydown, true);\n\t\telements.dialog.classList.remove(config.openClass);\n\t}\n\n\t/**\n\t * Toggle Dialog display.\n\t * @param {boolean} toggle - If true open, if false close.\n\t */\n\tfunction toggle(toggle = !isOpen) {\n\t\ttoggle ? open() : close();\n\t}\n\n\t/**\n\t * Destroy\n\t */\n\tfunction destroy() {\n\t\tconst attributes = [\n\t\t\t'role',\n\t\t\t'aria-modal',\n\t\t\t'aria-label',\n\t\t\t'aria-labeledby',\n\t\t\t'aria-describedby',\n\t\t];\n\n\t\tclose();\n\t\tinitiated = false;\n\t\tattributes.forEach(attr => elements.dialog.removeAttribute(attr));\n\n\t\tdispatchEvent('destroy');\n\t}\n\n\t/**\n\t * Wrapper method to add an event listener.\n\t *\n\t * @param {string} type\n\t * @param {function} handler\n\t */\n\tfunction on(type, handler) {\n\t\telements.dialog.addEventListener(type, handler);\n\t}\n\n\t/**\n\t * Wrapper method to remove an event listener.\n\t *\n\t * @param {string} type\n\t * @param {function} handler\n\t */\n\tfunction off(type, handler) {\n\t\telements.dialog.removeEventListener(type, handler);\n\t}\n\n\t/**\n\t * Dispatches a custom event.\n\t *\n\t * @param {string} name - The event name.\n\t * @returns {boolean} False if preventDefault() was called, true otherwise.\n\t */\n\tfunction dispatchEvent(name) {\n\t\tconst event = new CustomEvent(name, {\n\t\t\tbubbles: true,\n\t\t\tcancelable: true,\n\t\t});\n\n\t\treturn elements.dialog.dispatchEvent(event);\n\t}\n\n\treturn { elements, create, destroy, open, close, toggle, isOpen, on, off };\n}\n"],"names":["const","defaults","label","description","alert","openClass","selectors","focus","element","HTMLElement","getFocusableElements","Array","from","querySelectorAll","filter","elem","tagName","type","isRadio","document","getElementsByName","name","some","input","checked","isFocusableRadio","tabindex","parseInt","getAttribute","hidden","disabled","offsetParent","getComputedStyle","visibility","isTabbable","dialog","main","options","isOpen","initiated","elements","triggeringElement","undefined","getElementById","Error","config","Object","assign","trap","trapActivated","onFocus","event","focusLost","contains","activeElement","preventDefault","stopImmediatePropagation","nodes","length","focusFirstElement","onKeydown","key","firstTabStop","lastTabStop","shiftKey","trapTab","addEventListener","removeEventListener","focusTrap","close","open","dispatchEvent","classList","add","activate","querySelector","deactivate","remove","CustomEvent","bubbles","cancelable","setAttribute","labeledby","forEach","attr","removeAttribute","toggle","handler"],"mappings":"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"}